// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos2 (title, done) VALUES (?, ?) RETURNING id
`

type CreateTodoParams struct {
	Title string `json:"title"`
	Done  bool   `json:"done"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.Title, arg.Done)
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos2 WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, done FROM todos2 WHERE id = ?
`

func (q *Queries) GetTodoByID(ctx context.Context, id int64) (Todos2, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todos2
	err := row.Scan(&i.ID, &i.Title, &i.Done)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, done FROM todos2
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todos2, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todos2
	for rows.Next() {
		var i Todos2
		if err := rows.Scan(&i.ID, &i.Title, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoStatus = `-- name: UpdateTodoStatus :exec
UPDATE todos2 SET done = ? WHERE id = ?
`

type UpdateTodoStatusParams struct {
	Done bool  `json:"done"`
	ID   int64 `json:"id"`
}

func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoStatus, arg.Done, arg.ID)
	return err
}
